using BMW.Rheingold.Psdz.Model.Certificate;
using System.Collections.Generic;

namespace BMW.Rheingold.Psdz
{
    internal class EcuSecCheckingStatusEtoMapper : MapperBase<EcuSecCheckingStatusEtoModel?, PsdzEcuCertCheckingStatus?>
    {
        protected override IDictionary<EcuSecCheckingStatusEtoModel?, PsdzEcuCertCheckingStatus?> CreateMap()
        {
            return new Dictionary<EcuSecCheckingStatusEtoModel?, PsdzEcuCertCheckingStatus?>
        {
            {
                EcuSecCheckingStatusEtoModel.OK,
                PsdzEcuCertCheckingStatus.Ok
            },
            {
                EcuSecCheckingStatusEtoModel.UNCHECKED,
                PsdzEcuCertCheckingStatus.Unchecked
            },
            {
                EcuSecCheckingStatusEtoModel.MALFORMED,
                PsdzEcuCertCheckingStatus.Malformed
            },
            {
                EcuSecCheckingStatusEtoModel.EMPTY,
                PsdzEcuCertCheckingStatus.Empty
            },
            {
                EcuSecCheckingStatusEtoModel.INCOMPLETE,
                PsdzEcuCertCheckingStatus.Incomplete
            },
            {
                EcuSecCheckingStatusEtoModel.SECURITY_ERROR,
                PsdzEcuCertCheckingStatus.SecurityError
            },
            {
                EcuSecCheckingStatusEtoModel.WRONG_VIN17,
                PsdzEcuCertCheckingStatus.WrongVin17
            },
            {
                EcuSecCheckingStatusEtoModel.CHECK_STILL_RUNNING,
                PsdzEcuCertCheckingStatus.CheckStillRunning
            },
            {
                EcuSecCheckingStatusEtoModel.ISSUER_CERT_ERROR,
                PsdzEcuCertCheckingStatus.IssuerCertError
            },
            {
                EcuSecCheckingStatusEtoModel.WRONG_ECU_UID,
                PsdzEcuCertCheckingStatus.WrongEcuUid
            },
            {
                EcuSecCheckingStatusEtoModel.DECRYPTION_ERROR,
                PsdzEcuCertCheckingStatus.Decryption_Error
            },
            {
                EcuSecCheckingStatusEtoModel.OWN_CERT_NOT_PRESENT,
                PsdzEcuCertCheckingStatus.OwnCertNotPresent
            },
            {
                EcuSecCheckingStatusEtoModel.KEY_ERROR,
                PsdzEcuCertCheckingStatus.KeyError
            },
            {
                EcuSecCheckingStatusEtoModel.NOT_USED,
                PsdzEcuCertCheckingStatus.NotUsed
            },
            {
                EcuSecCheckingStatusEtoModel.OUTDATED,
                PsdzEcuCertCheckingStatus.Outdated
            },
            {
                EcuSecCheckingStatusEtoModel.OTHER,
                PsdzEcuCertCheckingStatus.Other
            },
            {
                EcuSecCheckingStatusEtoModel.UNDEFINED,
                PsdzEcuCertCheckingStatus.Undefined
            }
        };
        }
    }
}